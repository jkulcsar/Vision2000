// IRRemoteControl.cpp: implementation of the CIRRemoteControl class.
//
//////////////////////////////////////////////////////////////////////

#include "stdafx.h"
#include "vision2000.h"
#include "IRRemoteControl.h"

#include <conio.h>
#include <dos.h>

#ifdef _DEBUG
#undef THIS_FILE
static char THIS_FILE[]=__FILE__;
#define new DEBUG_NEW
#endif

#define MAXSAMPLE 50000

//////////////////////////////////////////////////////////////////////
// Construction/Destruction
//////////////////////////////////////////////////////////////////////

CIRRemoteControl::CIRRemoteControl()
{
	m_pbData	=	NULL;
	m_dwLength	=	0;

	m_pbData = new BYTE[MAXSAMPLE+1];
	for(DWORD i=0; i<MAXSAMPLE; i++ )
		m_pbData[i] = 0;

	// init local copy of COM parallel port object
	CSystemTrayApp* pApp;
	pApp = (CSystemTrayApp*) AfxGetApp();
	m_pPP = pApp->GetSystemSettings()->GetParallelPort();
}


CIRRemoteControl::~CIRRemoteControl()
{
//	do not destroy the CIRRemoteControl object here !
//	the pointer to this newly allocated object is stored in CArray, 
//	it will be destroyed there !

	if( m_pbData != NULL )
	{
		delete m_pbData;
		m_pbData = NULL;
	}

}

void CIRRemoteControl::Record()
{
	DWORD i, j, len;
	unsigned char mask, d;
	BYTE bStatus;

	CCriticalSection criticalSection;

	BYTE byteMask		= 0x00;
	BYTE byteTemp		= 0x00;
	BYTE byteDevice		= 0x00;
	BYTE byteToWrite	= 0x00;
	

	criticalSection.Lock();

//////////////////////////////////////////////////////////////////////////
// the code for the real board	

	// set D3 ON (the IR wizard LED)
	byteMask		= 0xF7;	// mask out D3
	byteTemp		= 0x00;
	byteDevice		= 0x08;
	byteToWrite		= 0x00;

	byteToWrite	= m_pPP->ReadDataPort();

	byteTemp	= byteMask & byteToWrite;
	byteToWrite = byteTemp | byteDevice;

//	m_pPP->WriteDataPort( byteToWrite );
	_outp(LPT1,byteToWrite);	


	
	// set D6 on 1
	byteMask		= 0xBF;	// mask out D6
	byteTemp		= 0x00;
	byteDevice		= 0x40;
	byteToWrite		= 0x00;

//	byteToWrite	= m_pPP->ReadDataPort();
	byteToWrite = _inp( LPT1 );

	byteTemp	= byteMask & byteToWrite;
	byteToWrite = byteTemp | byteDevice;

//	m_pPP->WriteDataPort( byteToWrite );
	_outp(LPT1,byteToWrite);

//	while( (bStatus = m_pPP->ReadStatusPort() & 16) == 0);
//	while( (bStatus = m_pPP->ReadStatusPort() & 16) == 16);	// Wait for 1st data
	while ((_inp(LPT1+1)&16)==0);
	while ((_inp(LPT1+1)&16)==16); 
	
//////////////////////////////////////////////////////////////////////////

	// set D1 on 1
	byteMask		= 0xFD;	// mask out D1
	byteTemp		= 0x00;
	byteDevice		= 0x02;
	byteToWrite		= 0x00;

//	byteToWrite	= m_pPP->ReadDataPort();
	byteToWrite	= _inp(LPT1);

	byteTemp	= byteMask & byteToWrite;
	byteToWrite = byteTemp | byteDevice;

//	m_pPP->WriteDataPort( byteToWrite );
	_outp(LPT1,byteToWrite);


//	while( (bStatus = m_pPP->ReadStatusPort() & 16) == 0);
//	while( (bStatus = m_pPP->ReadStatusPort() & 16) == 16);	// Wait for 1st data
	while ((_inp(LPT1+1)&16)==0);
	while ((_inp(LPT1+1)&16)==16); 


	/*
	_outp(LPT1,2);
	while ((_inp(LPT1+1)&16)==0);
	while ((_inp(LPT1+1)&16)==16); 
	*/

	for (i=0; i<MAXSAMPLE; i++)
	{
		mask=128;
		d=0;
		for (j=0; j<8; j++)
		{
//			if ( (bStatus = m_pPP->ReadStatusPort() & 16 ) == 0) d |= mask;
			if ((_inp(LPT1+1)&16)==0) d |= mask;
			mask=mask>>1;
		}
		m_pbData[i] = d;
	}

	/*
	// set D6 on 0
	byteMask	= 0xBF;	// mask out D6
	byteTemp	= 0x00;
	byteDevice	= 0x00;
	byteToWrite	= 0x00;

	byteToWrite	= m_pPP->ReadDataPort();

	byteTemp	= byteMask & byteToWrite;
	byteToWrite = byteTemp | byteDevice;

	m_pPP->WriteDataPort( byteToWrite );
	*/

//	_outp(LPT1, 0);

	// set D1 on 0
	byteMask	= 0xFD;	// mask out D1
	byteTemp	= 0x00;
	byteDevice	= 0x00;
	byteToWrite	= 0x00;

//	byteToWrite	= m_pPP->ReadDataPort();
	byteToWrite	= _inp(LPT1);

	byteTemp	= byteMask & byteToWrite;
	byteToWrite = byteTemp | byteDevice;

//	m_pPP->WriteDataPort( byteToWrite );
	_outp(LPT1, byteToWrite); 



	/*
	// set D3 OFF (the IR wizard LED)
	byteMask		= 0xF7;	// mask out D3
	byteTemp		= 0x00;
	byteDevice		= 0x00;
	byteToWrite		= 0x00;

	byteToWrite	= m_pPP->ReadDataPort();

	byteTemp	= byteMask & byteToWrite;
	byteToWrite = byteTemp | byteDevice;

	m_pPP->WriteDataPort( byteToWrite );
	*/

	/* Chop off ending zeros */
	for (len=MAXSAMPLE-1; len; len--)
	{
		if (m_pbData[len] != 0xFF) break;
	}


	m_dwLength = len;


	criticalSection.Unlock();
//	_enable();
}


void CIRRemoteControl::Playback()
{
	DWORD i, j;
	unsigned char mask, d;

	CCriticalSection criticalSection;

	BYTE	byteMask		= 0x00;
	BYTE	byteTemp		= 0x00;
	BYTE	byteDevice		= 0x00;
	BYTE	byteToWrite		= 0x00;


	
	criticalSection.Lock();

	for (i=0; i<m_dwLength; i++)
	{
		mask = 128;
		d = m_pbData[i];
		for (j=0; j<8; j++)
		{
			if ( d & mask) 
			{
				// set D5 on 1
//				BYTE byteMask		= 0xDF;	// mask out D5
//				BYTE byteTemp		= 0x00;
//				BYTE byteDevice		= 0x20;
//				BYTE byteToWrite	= 0x00;

				/*
				// for testing ONLY !
				// set D3 and D5 on 1
				byteMask		= 0xD7;	// mask out D3
				byteTemp		= 0x00;
				byteDevice		= 0x28;
				byteToWrite		= 0x00;

				byteToWrite	= m_pPP->ReadDataPort();

				byteTemp	= byteMask & byteToWrite;
				byteToWrite = byteTemp | byteDevice;
	
				m_pPP->WriteDataPort( byteToWrite );
				*/

				
//				_outp(LPT1, 1);

				// for testing ONLY !
				// set D7 on 1
				_outp(LPT1, 0x80);
			}
			else 
			{
				// set D5 on 0
//				BYTE byteMask		= 0xDF;	// mask out D5
//				BYTE byteTemp		= 0x00;
//				BYTE byteDevice		= 0x00;
//				BYTE byteToWrite	= 0x00;
				
				/*
				// set D3 and D5 on 0
				byteMask		= 0xD7;	// mask out D3 and D5
				byteTemp		= 0x00;
				byteDevice		= 0x00;
				byteToWrite		= 0x00;


				byteToWrite	= m_pPP->ReadDataPort();

				byteTemp	= byteMask & byteToWrite;
				byteToWrite = byteTemp | byteDevice;
	
				m_pPP->WriteDataPort( byteToWrite );
				*/

//				_outp(LPT1,0);

				// for testing ONLY !
				// set D7 on 0
				_outp(LPT1, 0);

			}
			
			mask=mask>>1;
		}
	}

	/*
	// make sure we turn the LED off
	// set D3 and D5 on 0
	byteMask		= 0xD7;	// mask out D3 and D5
	byteTemp		= 0x00;
	byteDevice		= 0x00;
	byteToWrite		= 0x00;


	byteToWrite	= m_pPP->ReadDataPort();

	byteTemp	= byteMask & byteToWrite;
	byteToWrite = byteTemp | byteDevice;
	
	m_pPP->WriteDataPort( byteToWrite );
	*/

	// make sure we turn the LED off
	// set D7 on 0
	_outp(LPT1, 0);

	criticalSection.Unlock();
}
